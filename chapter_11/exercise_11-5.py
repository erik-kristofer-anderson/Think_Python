# start with provided solution for exervise 8.5
# http://greenteapress.com/thinkpython2/code/rotate.py

"""This module contains a code example related to

Think Python, 2nd Edition
by Allen Downey
http://thinkpython2.com

Copyright 2015 Allen Downey

License: http://creativecommons.org/licenses/by/4.0/
"""

def rotate_letter(letter, n):
    """Rotates a letter by n places.  Does not change other chars.

    letter: single-letter string
    n: int

    Returns: single-letter string
    """
    if letter.isupper():
        start = ord('A')
    elif letter.islower():
        start = ord('a')
    else:
        return letter

    c = ord(letter) - start
    i = (c + n) % 26 + start
    return chr(i)


def rotate_word(word, n):
    """Rotates a word by n places.

    word: string
    n: integer

    Returns: string
    """
    res = ''
    for letter in word:
        res += rotate_letter(letter, n)
    return res



# print(rotate_word('cheer', 7))
# print(rotate_word('melon', -10))
# print(rotate_word('sleep', 9))


# from exercise 9.1
fin = open('words.txt')
words = []
for line in fin:
    word = line.strip()
    words.append(word)
print(words)

# def find_pairs(words):
#     for i, word in enumerate(words):
#         for j, word2 in enumerate(words):
#             if i != j:
#                 for n in range(25):
#                     word_rotated = rotate_word(word, n)
#                     if word2 == word_rotated:
#                         print(word, word2)


# solution from the book's website:
# http://greenteapress.com/thinkpython2/code/rotate_pairs.py

def make_word_dict():
    """Read the words in words.txt and return a dictionary that contains the words as keys"""
    d = dict()
    fin = open('words.txt')
    for line in fin:
        word = line.strip().lower()
        d[word] = None

    return d

def rotate_pairs(word, word_dict):
    """Prints all words that can be generated by rotating word.

    word: string
    word_dict: dictionary with words as keys
    """
    for i in range(1, 14): ### why only 14?
        rotated = rotate_word(word, i)
        if rotated in word_dict:
            print(word, i, rotated)

word_dict = make_word_dict()
for word in word_dict:
    rotate_pairs(word, word_dict)
